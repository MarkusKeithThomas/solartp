import {
  createContext,
  useContext,
  useState,
  ReactNode,
  useEffect,
} from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { googleLogout } from "@react-oauth/google";
import { useUserLocalStorage } from "../hook/useUserLocalStorage";

// Ki·ªÉu d·ªØ li·ªáu ng∆∞·ªùi d√πng
type User = {
  id: number;
  email: string;
  name: string;
  avatar: string;
};

// Ki·ªÉu d·ªØ li·ªáu cho Context
interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  register: (email: string, password: string) => Promise<void>;
  handleErrorLogin: () => string;
  handleErrorRegister: () => string;
  successMessage: string;
  loginWithGoogle: () => void; // ‚úÖ Th√™m ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p Google
  logoutAdmin: () => void; // ‚úÖ Th√™m ph∆∞∆°ng th·ª©c ƒëƒÉng xu·∫•t Admin
}

// T·∫°o Context
const AuthContext = createContext<AuthContextType | null>(null);
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

// **Provider bao b·ªçc ·ª©ng d·ª•ng**
export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useUserLocalStorage<User | null>("user-info",null); // ‚úÖ Th√™m user-info
  const [errorMessage, setErrorMessage] = useState(""); // Bi·∫øn l∆∞u l·ªói
  const [errorMessageRegister, setErrorMessageRegister] = useState("");
  const [successMessage, setSuccessMessage] = useState<string>("");
  const navigate = useNavigate(); // ‚úÖ ƒê∆∞a `useNavigate` v√†o ƒë√¢y, trong Component Function

  function handleErrorLogin() {
    return errorMessage;
  }
  function handleErrorRegister() {
    return errorMessageRegister;
  }

  useEffect(() => {
    const accessToken = localStorage.getItem("accessToken");
    const savedUser = localStorage.getItem("user-info");
  
    // N·∫øu kh√¥ng c√≥ token ho·∫∑c user => Xem nh∆∞ ch∆∞a ƒëƒÉng nh·∫≠p
    if (!accessToken || !savedUser) {
      //logout(); // ƒë·∫£m b·∫£o d·ªçn d·∫πp n·∫øu c·∫ßn
      return;
    }
  
    try {
      const parsedUser = JSON.parse(savedUser);
      if (!parsedUser?.id || !parsedUser?.email) {
        throw new Error("Th√¥ng tin user kh√¥ng h·ª£p l·ªá");
      }
  
      // T·∫°m g√°n user t·ª´ localStorage
      setUser(parsedUser);
  
      // G·ªçi API x√°c th·ª±c l·∫°i user
      axios
        .get(`${API_BASE_URL}/tai-khoan/user-info`, {
          headers: { Authorization: `Bearer ${accessToken}` },
        })
        .then((response) => {
          const userData = response.data.data;
          setUser(userData);
          localStorage.setItem("user-info", JSON.stringify(userData));
        })
        .catch((error) => {
          if (error.response?.status === 401) {
            console.warn("Access Token h·∫øt h·∫°n. ƒêang th·ª±c hi·ªán refresh...");
            handleRefreshToken(); // G·ªçi h√†m x·ª≠ l√Ω refresh token
          } else {
            console.error("L·ªói x√°c th·ª±c ng∆∞·ªùi d√πng:", error);
            logout(); // fallback n·∫øu l·ªói b·∫•t th∆∞·ªùng
          }
        });
    } catch (e) {
      console.warn("L·ªói khi parse user-info. ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng.");
      logout();
    }
  }, []);

  const handleRefreshToken = async () => {
    try {
      const response = await axios.post(
        `${API_BASE_URL}/auth/refresh-token`,
        {},
        { withCredentials: true }
      );

      if (response.data.data) {
        localStorage.setItem("accessToken", response.data.data);
      } else {
        logout();
        navigate("/tai-khoan");
      }
    } catch (error) {
      logout();
    }
  };

  // H√†m ƒëƒÉng nh·∫≠p
  const login = async (email: string, password: string) => {
    setErrorMessage(""); // X√≥a l·ªói c≈©
    try {
      const response = await axios.post(
        `${API_BASE_URL}/tai-khoan/login`,
        { email, password },
        { withCredentials: true }
      );

      if (response.data.code !== 200) {
        throw new Error(response.data.data || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!");
      }
      // ‚úÖ L∆∞u Access Token
      const accessToken = response.data.data;
      if (accessToken) {
        localStorage.setItem("accessToken", response.data.data);
      } else {
      }

      // ‚úÖ 2. G·ªçi API `/user-info` ƒë·ªÉ l·∫•y th√¥ng tin user
      const userResponse = await axios.get(
        `${API_BASE_URL}/tai-khoan/user-info`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
        }
      );
      // ‚úÖ 3. L∆∞u user v√†o `localStorage` v√† React Context
      const userData = userResponse.data.data;
      setUser(userData);


      // ‚úÖ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ch·ªß
      setSuccessMessage("üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Welcome to SolarTP.");
      setTimeout(() => {
        navigate("/"); // Chuy·ªÉn h∆∞·ªõng sau 3 gi√¢y
      }, 2000);
    } catch (error: any) {
      if (axios.isAxiosError(error)) {
        setErrorMessage(
          error.response?.data?.message || "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i"
        );

      } else {
        setErrorMessage(error.message);
      }
    }
  };

  const register = async (email: string, password: string) => {
    setErrorMessageRegister(""); // X√≥a l·ªói c≈©
    setSuccessMessage("");

    try {
      const response = await axios.post(
        `${API_BASE_URL}/tai-khoan/register`,
        { email, password }
      );

      if (response.data.code !== 200) {
        setErrorMessageRegister(response.data.data);
        throw new Error(response.data.data);
      }

      // ‚úÖ N·∫øu ƒëƒÉng k√Ω th√†nh c√¥ng, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      setSuccessMessage("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
      setTimeout(() => {
        navigate("/tai-khoan");
      }, 2000);
    } catch (error: any) {
      setErrorMessageRegister(
        error.response?.data?.data || "Vui l√≤ng ƒëƒÉng k√≠ l·∫°i"
      );
    }
  };

  const loginWithGoogle = () => {
    window.location.href = `${API_BASE_URL}/oauth2/authorization/google`;
  };

  // ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
  const logout = () => {
    setUser(null);
    localStorage.removeItem("accessToken"); // ‚úÖ X√≥a accessToken ho√†n to√†n
    localStorage.removeItem("user-info"); // ‚úÖ X√≥a th√¥ng tin user
    googleLogout();
    navigate("/tai-khoan");
  };
  const logoutAdmin = () => {
    localStorage.removeItem("user-info-admin");
    localStorage.removeItem("admin-auth");
    navigate("/admin/login"); // üëâ Kh√¥ng reload trang, chuy·ªÉn n·ªôi b·ªô
  };


  return (
    <AuthContext.Provider
      value={{
        user,
        login,
        logout,
        handleErrorLogin,
        register,
        handleErrorRegister,
        successMessage,
        loginWithGoogle,
        logoutAdmin
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

// Hook s·ª≠ d·ª•ng Context
export function useAuthContext() {
  const context = useContext(AuthContext);
  if (!context) throw new Error("useAuthContext ph·∫£i n·∫±m trong AuthProvider");
  return context;
}
