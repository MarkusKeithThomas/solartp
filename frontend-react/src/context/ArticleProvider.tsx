import axios from "axios";
import React, { createContext, ReactNode, useContext, useEffect, useRef, useState } from "react";
import { useArticleLocalStorage } from "../hook/useArticleLocalStorage";

export type Article = {
    id: number;
    title: string;
    slugTitle:string;
    header1: string;
    content11: string;
    content12: string;
    header2: string;
    content21: string;
    content22: string;
    header3: string;
    content31: string;
    content32: string;
    header4: string;
    content41: string;
    content42: string;
    image1Url: string;
    altImage1: string;
    image2Url: string;
    altImage2: string;
    dateCreate: string; // Ho·∫∑c `Date` n·∫øu mu·ªën x·ª≠ l√Ω d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng th·ªùi gian
};
interface ArticleContextType {
    articles: Article[];
    getArticleById: (id: number) => Article | undefined;
    shortArticles: Article[]    
}


const ArticleContext = createContext({} as ArticleContextType);

export function useArticleContext() {
    return useContext(ArticleContext);
}
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;


export function ArticleProvider({ children }: { children: ReactNode }) {
    const [articles, setArticle] = useArticleLocalStorage<Article[]>("article-save",[]);
    const[shortArticles,setShortArticles] = useState<Article[]>([])
    const [lastId, setLastId] = useState(0);
    const observerRef = useRef(null);
    const [loading, setLoading] = useState(false);
    const [hasMore, setHasMore] = useState(true); // Ki·ªÉm so√°t c√≤n b√†i ƒë·ªÉ t·∫£i hay kh√¥ng


    const fetchArticles = async () => {
        if (loading || !hasMore) return; // Tr√°nh g·ªçi API li√™n t·ª•c khi ch∆∞a c√≥ d·ªØ li·ªáu m·ªõi
      setLoading(true);

      try {
        const res = await axios.get(`${API_BASE_URL}/bai-viet/list`, {
          params: { lastId: lastId, limit: 10 },
        });
        if (res.data.articles.length > 0) {
            // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu m·ªõi kh√¥ng, tr√°nh tr√πng l·∫∑p
            const newArticles: Article[] = res.data.articles.filter(
                (newArticle: Article) => !articles.some((oldArticle: Article) => oldArticle.id === newArticle.id)
            );
            if (newArticles.length === 0) {
                setHasMore(false); // Kh√¥ng c√≤n b√†i vi·∫øt m·ªõi
            } else {
                
                setArticle((prev) => [...prev, ...newArticles]); // G·ªôp d·ªØ li·ªáu ƒë√∫ng c√°ch
                setLastId(res.data.lastId); // C·∫≠p nh·∫≠t lastId ƒë√∫ng c√°ch
            }
        }
      } catch (error) {
        console.error("L·ªói t·∫£i b√†i vi·∫øt : ArticleContext", error);
      } finally {
        setLoading(false);
      }
    };
    useEffect(() => {
        if (articles.length >= 10) {
            setShortArticles(articles.slice(5, 10)); // L·∫•y t·ª´ b√†i vi·∫øt s·ªë 5 ƒë·∫øn s·ªë 10
        }
    }, [articles]);


    // üü¢ D√πng IntersectionObserver ƒë·ªÉ t·ª± ƒë·ªông t·∫£i th√™m b√†i vi·∫øt khi cu·ªôn xu·ªëng
    useEffect(() => {
        if (!hasMore) return; // N·∫øu kh√¥ng c√≤n b√†i vi·∫øt m·ªõi, kh√¥ng theo d√µi n·ªØa

        const observer = new IntersectionObserver(
            (entries) => {
                if (entries[0].isIntersecting && !loading) {
                    fetchArticles();
                }
            },
            { threshold: 1.0 }
        );

        if (observerRef.current) observer.observe(observerRef.current);

        return () => observer.disconnect();
    }, [lastId, hasMore]);


    function getArticleById(id: number): Article | undefined {
        return articles.find((article) => article.id === id);
    }


    return (
        <ArticleContext.Provider value={{ articles, getArticleById, shortArticles }}>
            {children}
            {/* üü¢ Th√™m ref v√†o cu·ªëi danh s√°ch ƒë·ªÉ k√≠ch ho·∫°t Load More */}
            <div ref={observerRef} style={{ height: "10px" }}></div>
            {loading && <p className="text-center">ƒêang t·∫£i th√™m...</p>}
        </ArticleContext.Provider>
        

    )
}