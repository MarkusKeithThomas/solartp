package ecommerce.project.exception;

import ecommerce.project.baseresponse.BaseResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@ControllerAdvice
public class CentralException {

    private static final Logger LOGGER = Logger.getLogger(CentralException.class.getName());

    // üõë X·ª≠ l√Ω l·ªói InsertException (L·ªói khi th√™m d·ªØ li·ªáu v√†o database)
    @ExceptionHandler({InsertException.class})
    public ResponseEntity<BaseResponse> handleInsertException(Exception e) {
        LOGGER.log(Level.SEVERE, "InsertException: " + e.getMessage(), e);
        return buildErrorResponse(500, "L·ªói khi th√™m d·ªØ li·ªáu!", e);
    }

    // üõë X·ª≠ l√Ω l·ªói khi upload file th·∫•t b·∫°i
    @ExceptionHandler({FileUploadException.class})
    public ResponseEntity<BaseResponse> handleFileUploadException(Exception e) {
        LOGGER.log(Level.WARNING, "FileUploadException: " + e.getMessage(), e);
        return buildErrorResponse(400, "L·ªói khi upload file!", e);
    }

    // üõë X·ª≠ l√Ω l·ªói ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
    @ExceptionHandler({LoginException.class})
    public ResponseEntity<BaseResponse> handleLoginException(Exception e) {
        LOGGER.log(Level.WARNING, "LoginException: " + e.getMessage(), e);
        return buildErrorResponse(401, "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!", e);
    }

    // üõë X·ª≠ l√Ω l·ªói ƒëƒÉng k√Ω th·∫•t b·∫°i
    @ExceptionHandler({RegisterException.class})
    public ResponseEntity<BaseResponse> handleRegisterException(Exception e) {
        LOGGER.log(Level.WARNING, "RegisterException: " + e.getMessage(), e);
        return buildErrorResponse(400, "ƒêƒÉng k√Ω th·∫•t b·∫°i!", e);
    }

    // üõë X·ª≠ l√Ω l·ªói validation d·ªØ li·ªáu ƒë·∫ßu v√†o (v√≠ d·ª•: email kh√¥ng h·ª£p l·ªá, password qu√° ng·∫Øn, ...)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<BaseResponse> handleValidationExceptions(MethodArgumentNotValidException ex) {
        LOGGER.log(Level.WARNING, "Validation Error: " + ex.getMessage(), ex);

        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getFieldErrors().forEach(error ->
                errors.put(error.getField(), error.getDefaultMessage())
        );

        BaseResponse response = new BaseResponse();
        response.setCode(400);
        response.setMessage("L·ªói validation!");
        response.setData(errors);

        return ResponseEntity.badRequest().body(response);
    }

    // üõë X·ª≠ l√Ω l·ªói ƒëƒÉng nh·∫≠p Google th·∫•t b·∫°i
    @ExceptionHandler({GoogleLoginException.class})
    public ResponseEntity<BaseResponse> handleGoogleLoginException(Exception e) {
        LOGGER.log(Level.WARNING, "GoogleLoginException: " + e.getMessage(), e);
        return buildErrorResponse(401, "ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i!", e);
    }

    // üõë X·ª≠ l√Ω l·ªói khi refresh token th·∫•t b·∫°i
    @ExceptionHandler({RefreshException.class})
    public ResponseEntity<BaseResponse> handleRefreshException(Exception e) {
        LOGGER.log(Level.WARNING, "RefreshException: " + e.getMessage(), e);
        return buildErrorResponse(400, "L·ªói Refresh Token!", e);
    }

    // üõë X·ª≠ l√Ω l·ªói khi logout th·∫•t b·∫°i
    @ExceptionHandler({LogoutException.class})
    public ResponseEntity<BaseResponse> handleLogoutException(Exception e) {
        LOGGER.log(Level.WARNING, "LogoutException: " + e.getMessage(), e);
        return buildErrorResponse(400, "L·ªói khi ƒëƒÉng xu·∫•t!", e);
    }
    // üõë X·ª≠ l√Ω l·ªói khi logout th·∫•t b·∫°i
    @ExceptionHandler({GetInfoException.class})
    public ResponseEntity<BaseResponse> handleGetInfoException(Exception e) {
        LOGGER.log(Level.WARNING, "GetInfo: " + e.getMessage(), e);
        return buildErrorResponse(400, "L·ªói khi l·∫•y d·ªØ li·ªáu!", e);
    }
    // üõë X·ª≠ l√Ω l·ªói khi quen password th·∫•t b·∫°i
    @ExceptionHandler({ForgotPassWordException.class})
    public ResponseEntity<BaseResponse> handleForgotPassWordException(Exception e) {
        LOGGER.log(Level.WARNING, "GetInfo: " + e.getMessage(), e);
        return buildErrorResponse(400, "L·ªói khi re-set password!", e);
    }

    // üõë X·ª≠ l√Ω l·ªói khi upload csv th·∫•t b·∫°i
    @ExceptionHandler({UploadExcelException.class})
    public ResponseEntity<BaseResponse> handleUploadExcelException(Exception e) {
        LOGGER.log(Level.WARNING, "GetInfo: " + e.getMessage(), e);
        return buildErrorResponse(400, "Truy c·∫≠p b·ªã t·ª´ ch·ªëi.", e);
    }

    // üõë X·ª≠ l√Ω l·ªói khi upload anh loi th·∫•t b·∫°i
    @ExceptionHandler({UploadFileToCloudFlareException.class})
    public ResponseEntity<BaseResponse> handleUploadFileToCloudFlareException(Exception e) {
        LOGGER.log(Level.WARNING, "GetInfo: " + e.getMessage(), e);
        return buildErrorResponse(400, "Upload b·ªã l·ªói.", e);
    }
    // üõë X·ª≠ l√Ω l·ªói khi upload anh loi th·∫•t b·∫°i
    @ExceptionHandler({ArticleGetException.class})
    public ResponseEntity<BaseResponse> handleArticleGetException(Exception e) {
        LOGGER.log(Level.WARNING, "GetInfo: " + e.getMessage(), e);
        return buildErrorResponse(400, "L·∫•y b√†i vi·∫øt b·ªã l·ªói.", e);
    }

    // üõë X·ª≠ l√Ω t·∫•t c·∫£ c√°c l·ªói ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ph√≠a tr√™n
    @ExceptionHandler(Exception.class)
    public ResponseEntity<BaseResponse> handleGlobalException(Exception e) {
        LOGGER.log(Level.SEVERE, "Unhandled Exception: " + e.getMessage(), e);
        return buildErrorResponse(500, "L·ªói h·ªá th·ªëng! Vui l√≤ng th·ª≠ l·∫°i sau.", e);
    }
    @ExceptionHandler(ProductNotFoundException.class)
    public ResponseEntity<BaseResponse> handleProductNotFound(ProductNotFoundException ex) {
        return ResponseEntity.status(404).body(new BaseResponse(404, ex.getMessage(), null));
    }

    @ExceptionHandler(CategoryNotFoundException.class)
    public ResponseEntity<BaseResponse> handleCategoryNotFound(CategoryNotFoundException ex) {
        return ResponseEntity.status(404).body(new BaseResponse(404, ex.getMessage(), null));
    }
    @ExceptionHandler(DeleteProductException.class)
    public ResponseEntity<BaseResponse> handleDeleteProductNotFound(Exception ex) {
        return ResponseEntity.status(404).body(new BaseResponse(404, ex.getMessage(), null));
    }
    @ExceptionHandler(StockException.class)
    public ResponseEntity<BaseResponse> handleStockException(Exception ex) {
        return ResponseEntity.status(404).body(new BaseResponse(404, ex.getMessage(), null));
    }
    @ExceptionHandler(ChattingException.class)
    public ResponseEntity<BaseResponse> handleChattingException(Exception ex) {
        return ResponseEntity.status(403).body(new BaseResponse(403, ex.getMessage(), null));
    }

    @ExceptionHandler(VoucherException.class)
    public ResponseEntity<BaseResponse> handleVoucherException(Exception ex) {
        return ResponseEntity.status(400).body(new BaseResponse(400, ex.getMessage(), null));
    }

    @ExceptionHandler(ProductSpecificationException.class)
    public ResponseEntity<BaseResponse> handleProductSpecificationException(Exception ex) {
        return ResponseEntity.status(400).body(new BaseResponse(400, ex.getMessage(), null));
    }

    @ExceptionHandler(SaveChatToDBException.class)
    public ResponseEntity<BaseResponse> handleSaveChatToDBException(Exception ex){
        return ResponseEntity.status(400).body(new BaseResponse(400, ex.getMessage(), null));
    }

    /**
     * H√†m build BaseResponse chu·∫©n h√≥a ph·∫£n h·ªìi l·ªói
     */
    private ResponseEntity<BaseResponse> buildErrorResponse(int statusCode, String message, Exception e) {
        BaseResponse response = new BaseResponse();
        response.setCode(statusCode);
        response.setMessage(message);
        response.setData(e.getMessage());
        return ResponseEntity.status(statusCode).body(response);
    }
}