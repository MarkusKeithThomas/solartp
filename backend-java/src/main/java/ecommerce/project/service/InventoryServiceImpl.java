package ecommerce.project.service;

import ecommerce.project.dtorequest.InventoryDeductRequestDTO;
import ecommerce.project.exception.StockException;
import ecommerce.project.repository.ProductRepository;
import ecommerce.project.utils.RedisKeyPrefix;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class InventoryServiceImpl implements InventoryService {

    private final ProductRepository productRepository;
    private final StockRedisService stockRedisService;

    @Transactional
    public void deductStock(InventoryDeductRequestDTO dto) {
        for (InventoryDeductRequestDTO.ProductQuantity item : dto.getItems()) {
            // ‚úÖ CH·ªà tr·ª´ trong MySQL
            int rows = productRepository.decreaseStock(item.getProductId(), item.getQuantity());


            if (rows ==  0) {
                // ‚ùå N·∫øu MySQL l·ªói, rollback Redis l·∫°i s·ªë l∆∞·ª£ng v√¨ ƒë√£ b·ªã tr·ª´ trong ph∆∞∆°ng th·ª©c sau
                /**
                 *      boolean success = stockRedisService.decrementMultiProduct(productIds, quantities);
                 *         if (!success) {
                 *             throw new StockException("M·ªôt s·ªë s·∫£n ph·∫©m trong kho kh√¥ng ƒë·ªß h√†ng.");
                 *         }
                 *         trong ph·∫ßn method    OrderResponse createOrder(OrderRequest request); */

                stockRedisService.restoreStock(item.getProductId(), item.getQuantity());
                log.error("‚ùå Kh√¥ng tr·ª´ ƒë∆∞·ª£c kho MySQL cho s·∫£n ph·∫©m {}", item.getProductId());
                throw new StockException("Stock: Tr·ª´ kho th·∫•t b·∫°i!");
            }

            log.info("‚úÖ Tr·ª´ kho MySQL th√†nh c√¥ng SP {} - SL {}", item.getProductId(), item.getQuantity());
        }

        log.info("üéâ Tr·ª´ kho ho√†n t·∫•t ƒë∆°n h√†ng {}", dto.getOrderId());
    }
}