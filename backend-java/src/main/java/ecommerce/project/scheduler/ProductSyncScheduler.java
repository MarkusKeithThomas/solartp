package ecommerce.project.scheduler;

import ecommerce.project.service.ProductRedisService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class ProductSyncScheduler {

    private final ProductRedisService productRedisService;

    private static final int MAX_RETRIES = 3;

    @Scheduled(cron = "0 */5 * * * *") // ch·∫°y m·ªói 5 ph√∫t
    public void syncGuestCarts() {
        log.info("üîÑ [Scheduler] B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô to√†n b·ªô s·∫£n ph·∫©m t·ª´ MySQL l√™n Redis... key product_map");

        int attempt = 0;
        boolean success = false;

        while (attempt < MAX_RETRIES && !success) {
            try {
                attempt++;
                productRedisService.syncAllActiveProductsToRedis();
                success = true;
                log.info("‚úÖ [Scheduler] ƒê·ªìng b·ªô s·∫£n ph·∫©m th√†nh c√¥ng ·ªü l·∫ßn th·ª≠ th·ª© {}", attempt);
            } catch (Exception e) {
                log.error("‚ùå [Scheduler] L·ªói khi ƒë·ªìng b·ªô s·∫£n ph·∫©m ·ªü l·∫ßn th·ª≠ th·ª© {}: {}", attempt, e.getMessage());
                if (attempt >= MAX_RETRIES) {
                    log.error("üí• [Scheduler] ƒê·ªìng b·ªô th·∫•t b·∫°i sau {} l·∫ßn th·ª≠. B·ªè qua.", MAX_RETRIES);
                } else {
                    try {
                        Thread.sleep(2000); // ng·ªß 2 gi√¢y tr∆∞·ªõc khi retry ti·∫øp
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        log.error("‚ö° [Scheduler] B·ªã gi√°n ƒëo·∫°n khi ƒë·ª£i retry", ie);
                        break;
                    }
                }
            }
        }
    }
}
