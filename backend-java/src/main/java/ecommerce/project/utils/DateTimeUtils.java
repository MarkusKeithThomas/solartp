package ecommerce.project.utils;

import java.time.*;
import java.time.format.DateTimeFormatter;

public class DateTimeUtils {

    private static final ZoneId ZONE_VN = ZoneId.of("Asia/Ho_Chi_Minh");
    private static final DateTimeFormatter VIETNAM_FORMATTER =
            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"); // B·∫°n c√≥ th·ªÉ thay b·∫±ng "dd/MM HH:mm" n·∫øu mu·ªën

    public static String formatToVietnamTime(Instant instant) {
        if (instant == null) return "";
        ZonedDateTime vietnamTime = instant.atZone(ZONE_VN);
        return vietnamTime.format(VIETNAM_FORMATTER);
    }

    /**
     * Ti·ªán √≠ch chu·∫©n h√≥a th·ªùi gian xuy√™n su·ªët to√†n h·ªá th·ªëng.
     * H·ªó tr·ª£: ISO format, epoch millis, UTC, gi·ªù Vi·ªát Nam (Asia/Ho_Chi_Minh)
     */

        // ‚úÖ M√∫i gi·ªù m·∫∑c ƒë·ªãnh (gi·ªù Vi·ªát Nam)
        public static final ZoneId ZONE_UTC = ZoneOffset.UTC;

        // ‚úÖ ƒê·ªãnh d·∫°ng ISO chu·∫©n ƒë·ªÉ truy·ªÅn JSON, l∆∞u Redis, MQ, FE
        public static final DateTimeFormatter ISO_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");

        // ========= üí° HI·ªÜN T·∫†I =========

        /** üïí L·∫•y th·ªùi gian hi·ªán t·∫°i theo UTC */
        public static Instant nowUtc() {
            return Instant.now();
        }

        /** üïí L·∫•y th·ªùi gian hi·ªán t·∫°i theo gi·ªù Vi·ªát Nam */
        public static LocalDateTime nowVietnam() {
            return LocalDateTime.now(ZONE_VN);
        }

        // ========= üßæ FORMAT CHU·ªñI =========

        /** Format LocalDateTime th√†nh chu·ªói ISO (gi·ªù VN) */
        public static String format(LocalDateTime time) {
            return time == null ? null : time.format(ISO_FORMATTER);
        }

        /** Format Instant (UTC) th√†nh chu·ªói ISO UTC */
        public static String format(Instant instant) {
            return instant == null ? null : ISO_FORMATTER.withZone(ZONE_UTC).format(instant);
        }

        /** Format LocalDateTime sang ISO + offset (+07:00) */
        public static String formatWithOffset(LocalDateTime time) {
            return time == null ? null : time.atZone(ZONE_VN).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        // ========= üì• PARSE =========

        /** Parse chu·ªói ISO th√†nh LocalDateTime (kh√¥ng c√≥ offset) */
        public static LocalDateTime parse(String isoString) {
            return LocalDateTime.parse(isoString, ISO_FORMATTER);
        }

        /** Parse millis ‚Üí LocalDateTime theo m√∫i gi·ªù Vi·ªát Nam */
        public static LocalDateTime fromMillis(long millis) {
            return Instant.ofEpochMilli(millis).atZone(ZONE_VN).toLocalDateTime();
        }

        // ========= ‚è± EPOCH =========

        /** Chuy·ªÉn LocalDateTime th√†nh millis (epoch) theo gi·ªù Vi·ªát Nam */
        public static long toMillis(LocalDateTime time) {
            return time.atZone(ZONE_VN).toInstant().toEpochMilli();
        }

        /** Chuy·ªÉn Instant UTC th√†nh millis */
        public static long toMillis(Instant instant) {
            return instant.toEpochMilli();
        }
}